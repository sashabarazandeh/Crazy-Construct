//class for the the game area - this is where all the drawing of the screen occurs

import java.awt.Graphics;
import java.awt.Color;
import javax.swing.JPanel;
import java.util.ArrayList;
import java.awt.image.BufferedImage; 
import java.awt.CardLayout;
import javax.sound.sampled.*;
import java.io.File;
import java.awt.Font;


class GamePanelOOP extends JPanel implements GameConstants{
  
  private GameTimer timer;
  //declare game objects
  private Player player;
  //   Timer time;
  private Map map;
  private int level;
  private boolean nextLevel;
  private String mapName;
  private MapStorage storage;
  private CardLayout cl;
  private JPanel container;
  private boolean gameOver;
  private Enemy enemy;
  private boolean deathScreen;
  private Clip gameTheme;
  private Font hudFont;
  private int lastLevel;
  private PlayerKeyListener keyListener;
  private String [] enemyDifficulty = {"LOW","MODERATE","SUBSTANTIAL","SEVERE","CRITICAL"};
  
  
  GamePanelOOP(JPanel container) {
    //game object initialization
    this.timer = new GameTimer();
    this.timer.start();
    this.level = 1;
    this.lastLevel = 5;
    this.player = new Player (PLAYER_SPAWN_X,PLAYER_SPAWN_Y , "images/player/", "png");
    this.enemy = new Enemy(ENEMY_SPAWN_X, ENEMY_SPAWN_Y, ENEMY_SPEED);
    this.storage = new MapStorage(level);
    this.mapName = storage.chooseMap();
    this.map = new Map(GAME_W, GAME_H); 
    this.gameOver = false;
    this.cl = (CardLayout)(container.getLayout());
    this.container = container;
    //set font
    this.hudFont = new Font("Lucida Console", Font.BOLD, 26);
    
    map.readMap(mapName);
    
    //attach key and mouse listeners to the game panel
    keyListener = new PlayerKeyListener(player, map, enemy);
    this.addKeyListener(keyListener);
    
    //JPanel Stuff
    this.setFocusable(true);      //make this window the active window
    this.requestFocusInWindow(); 
    loadGameTheme();
    
    //start the game loop in a separate thread (allows simple frame rate control)
    //alternately delete this code and just call repaint() at the end of paintComponent()
    Thread t = new Thread(new Runnable() { public void run() {gameLoop(); }}); //start the gameLoop 
    t.start();
  }
  
  //the main gameloop - this is where the game state is updated
  public  void gameLoop() { 
    //map.readMap(mapName);
    long currentTime;
    long previousTime = System.nanoTime();
    
    while(!gameOver){
      currentTime = System.nanoTime();
      if((currentTime-previousTime)/1000000.0 > SPRITE_UPDATE_MS){
        player.update();
        enemy.update();
      }
      previousTime = currentTime;
      
      playMusic();//if music isn't playing will restart the song
      
      enemy.seekPlayer(player, map);//seek player
      
      if (map.totalCoinsLeft() == 0){//<----- SASHA PUT YOUR COIN CONDITION HERE to change levels
          level++;
        if (level <= lastLevel) {
        nextMapSequence();
        }
        
      }
      //ending screens
      if(playerKilled(player, enemy) || timesUp() ) {
        timer.cancel();
        this.gameOver = true;
        this.removeKeyListener(keyListener);
        cl.show(container,"2");//switch to game over screen
      }
      else if(gameWon()){
        this.gameOver = true;
        this.removeKeyListener(keyListener);
        cl.show(container,"3");//show victory screen card#3
      }
      
      //repaint the window
      this.repaint();
      
      //wait for the frame to be seen by the user before refreshing
      try{ Thread.sleep(FRAME_TIME);
      }catch (Exception exc){System.out.println("Thread Error");}
    }
    this.gameTheme.stop();//stop playing gamemusic once player wins or loses
    
  }
  
  //-----------------------------------------------
  //music
  private void loadGameTheme(){
    try {
      AudioInputStream audioStream = AudioSystem.getAudioInputStream(new File("sounds/gameTheme.wav"));
      this.gameTheme = AudioSystem.getClip();
      this.gameTheme.open(audioStream);
    }
    catch(Exception e) {System.out.println("error loading sound");};        
  }
  
  private void playMusic(){
    if (!this.gameTheme.isRunning()){
      this.gameTheme.stop();              // stop the sound effect if still running
      this.gameTheme.flush();             // clear the buffer with audio data
      this.gameTheme.setFramePosition(0); // prepare to start from the beginning
    }
    this.gameTheme.start();
  }
  
  //-----------------------------------------------
  private void nextMapSequence() {
    player.spawn();
    enemy.spawn();

    enemy.setSpeed(enemy.getSpeedFromArray(this.level-1));
    storage.updateLevel(level);
    mapName = storage.chooseMap();
    map.readMap(mapName);
  }
  
  //-----------------------------------------------
  //game condition methods
  private boolean gameWon(){
    return this.level> lastLevel;//once you pass level 5 you win
  }
  private boolean playerKilled(Player player, Enemy enemy){
    return player.checkIntersection(enemy.getHitBox()) ;
  }
  private boolean timesUp(){
    if(this.timer.getTimeLeft() <= 0){
      return true;
    }
    else {
      return false;
    }
  }
  
  //-----------------------------------------------  
  // paintComponnent runs every time the window gets refreshed
  public void paintComponent(Graphics g) {   
    super.paintComponent(g);          //required
    setDoubleBuffered(true); 
    //screen is being refreshed - draw all objects
    g.setColor(Color.black);
    g.fillRect(0, 0, GAME_W, GAME_H);
    map.draw(g);
    player.draw(g); 
    enemy.draw(g);
    g.setFont(hudFont);
    g.setColor(Color.pink);
    g.drawString("Level: "+ level, 550, 50);
    g.drawString("Time left:"+timer.getTimeLeft()+"s", 550,100);
    g.drawString("Coins left:" + map.totalCoinsLeft() , 550, 150);
  }
}

